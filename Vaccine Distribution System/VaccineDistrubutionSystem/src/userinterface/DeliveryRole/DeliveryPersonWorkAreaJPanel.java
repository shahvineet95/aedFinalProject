/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.DeliveryRole;

import Business.Enterprise.Enterprise;
import Business.Organization.DeliveryOrganization;
import Business.Organization.DoctorOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.WorkRequest;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author imskr
 */
public class DeliveryPersonWorkAreaJPanel extends javax.swing.JPanel {

    private final JPanel userProcessContainer;
    private final DeliveryOrganization organization;
    private final Enterprise enterprise;
    private final UserAccount userAccount;
    /**
     * Creates new form DeliveryPersonWorkAreaJPanel
     * @param userProcessContainer
     * @param account
     * @param organization
     * @param enterprise
     */
    public DeliveryPersonWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, DeliveryOrganization organization, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = account;
        valueLabel.setText(enterprise.getName());
        populateRequestTable();
    }
    
    public void populateRequestTable(){
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();
        
        model.setRowCount(0);
        for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()){
            Object[] row = new Object[6];
            row[0] = request;
            row[1] = request.getReceiver();
            row[2] = request.getSender();
            row[3] = request.getRequestDate();
            row[4] = request.getStatus();
            row[5] = request.getMessage();
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        enterpriseLabel = new javax.swing.JLabel();
        valueLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        processJButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(153, 255, 153));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Product Sans", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icons8_delivery_50px_1.png"))); // NOI18N
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 80, 80, 60));

        enterpriseLabel.setFont(new java.awt.Font("Product Sans", 1, 18)); // NOI18N
        enterpriseLabel.setText("EnterPrise :");
        add(enterpriseLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 220, 127, 32));

        valueLabel.setFont(new java.awt.Font("Product Sans", 0, 18)); // NOI18N
        valueLabel.setText("<value>");
        add(valueLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 220, 556, 30));

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Batch", "Inventory", "Hospital", "Request Date", "Status", "Message"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);
        if (workRequestJTable.getColumnModel().getColumnCount() > 0) {
            workRequestJTable.getColumnModel().getColumn(2).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 270, 744, 213));

        jButton3.setBackground(new java.awt.Color(0, 51, 51));
        jButton3.setFont(new java.awt.Font("Product Sans", 1, 24)); // NOI18N
        jButton3.setForeground(new java.awt.Color(153, 255, 153));
        jButton3.setText("Order Pickup Confirm");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 500, 290, 60));

        processJButton.setBackground(new java.awt.Color(0, 51, 51));
        processJButton.setFont(new java.awt.Font("Product Sans", 1, 24)); // NOI18N
        processJButton.setForeground(new java.awt.Color(153, 255, 153));
        processJButton.setText("Order Delivered");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });
        add(processJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 500, 260, 60));

        jLabel2.setFont(new java.awt.Font("Product Sans", 1, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Delivery Person Work Area");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 140, 740, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Select a row!");
            return;
        }
         String str1 = JOptionPane.showInputDialog(null, "Your order is placed.Do you want to add addtional message");
        WorkRequest wr = (WorkRequest)workRequestJTable.getValueAt(selectedRow,0);
        wr.setStatus("Order picked Up");
        wr.setMessage(str1);
//        String selectedOrderId = (String) workRequestJTable.getValueAt(selectedRow, 4);
//        Order order = business.getOrderDirectory().getOrderByOrderId(selectedOrderId);
//
//        order.setStatus("Out For Delivery");
//        JOptionPane.showMessageDialog(null, "Order updated!");
//        populateRequestTable();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed
        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Select a row!");
            return;
        }
        
          String str1 = JOptionPane.showInputDialog(null, "Your order is placed.Do you want to add addtional message");
        WorkRequest wr = (WorkRequest)workRequestJTable.getValueAt(selectedRow,0);
        wr.setStatus("Order Delivered");
        wr.setMessage(str1);
//        String selectedOrderId = (String) workRequestJTable.getValueAt(selectedRow, 4);
//        Order order = business.getOrderDirectory().getOrderByOrderId(selectedOrderId);
//
//        if(order.getStatus().trim().equalsIgnoreCase("Out For Delivery")){
//            order.setResult(resultJTextField.getText());
//            order.setStatus("Completed");
//            resultJTextField.setText("");
//            JOptionPane.showMessageDialog(null, "Order updated!");
//            populateTable();
//        }
//        else{
//            JOptionPane.showMessageDialog(null, "Confirm order pick up before confirming delivery!");
//        }
        //        ProcessWorkRequestJPanel processWorkRequestJPanel = new ProcessWorkRequestJPanel(userProcessContainer, order);
        //        userProcessContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
        //        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        //        layout.next(userProcessContainer);

    }//GEN-LAST:event_processJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton processJButton;
    private javax.swing.JLabel valueLabel;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables
}
